# -*- coding: utf-8 -*-
"""IndiaTesting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YhgOGFXYfvVtNfSOZKF6gTUhhQYJPBe0
"""

import pandas as pd
import plotly as plot
import plotly.graph_objs as go

df_testing=pd.read_csv('StatewiseTestingDetails.csv')

df_testing.head()

df_testing.shape

df_testing['TotalSamples'].isnull().any()

df_cases=pd.read_csv('covid_19_india.csv')

df_cases.head()

df_cases.loc[:,'Deaths':'Confirmed'].isnull().any()

df_testing.head().info()

df_cases.head().info()

states_and_ut=df_testing['State'].unique().tolist()

len(states_and_ut)

fig = go.Figure()
for state in states_and_ut:
    fig.add_trace(go.Scatter(      
        x = df_testing[df_testing['State']==state]['Date'],
        y = df_testing[df_testing['State']==state]['TotalSamples'],
        mode='lines',
        name=state,
        connectgaps=True,
          ))

fig.show()

df_cases['Date']=pd.to_datetime(df_cases['Date'], format= '%d/%m/%y')

states_and_ut_cases=df_cases['State/UnionTerritory'].unique().tolist()

len(states_and_ut_cases)

fig_confirmed_cases = go.Figure()
for state in states_and_ut_cases:
    if state != 'Cases being reassigned to states' and state != 'Unassigned':
        fig_confirmed_cases.add_trace(go.Scatter(      
            x = df_cases[df_cases['State/UnionTerritory']==state]['Date'],
            y = df_cases[df_cases['State/UnionTerritory']==state]['Confirmed'],
            mode='lines',
            name=state,
            connectgaps=True,
              ))

fig_confirmed_cases.show()

patients=pd.read_csv('IndividualDetails.csv')

patients['age'].unique()

s = patients[patients['age'] != ('28-35' or 'NAN')]['age'].astype(float)
age_groups=pd.cut(s, [0,10,20,30,40,50,60,70,80,90,100], labels=['0-10','11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90','>91']).value_counts().rename_axis('Age Groups').to_frame('Cases')

age_groups

age_groups.index.tolist()

age_groups.Cases.tolist()

fig_ages = go.Figure(go.Bar(
            x = age_groups.index.tolist(),
            y = age_groups.Cases,
            text=age_groups.Cases,
            textposition='outside',
            hovertemplate='Ages:%{x}<extra></extra> '
))
fig_ages.update_layout(
    title_text="Confirmed Cases in Different Age groups.",
    yaxis=dict(
        title='Cases'
    )
    ,xaxis=dict(
        title='Age Groups'
    ))

HospitalBedsIndia=pd.read_csv('HospitalBedsIndia.csv')

HospitalBedsIndia

patients['detected_state'].unique().tolist()

HospitalBedsIndia['State/UT'].unique()

patients=patients.rename(columns={"detected_state":"State/UT"})

HospitalBedsIndia.at[0,'State/UT']="Andaman and Nicobar Islands"

HospitalBedsIndia['total_beds']=HospitalBedsIndia['NumUrbanBeds_NHP18']+HospitalBedsIndia['NumRuralBeds_NHP18']+HospitalBedsIndia['NumPublicBeds_HMIS']

df_beds=HospitalBedsIndia[['State/UT','total_beds']]

df_pateints_sw=patients[patients['current_status']=='Hospitalized']['State/UT'].value_counts().rename_axis('State/UT').to_frame('counts')

df_pateints_sw

df_beds

result = pd.merge(df_beds, df_pateints_sw,on='State/UT')

result

fig_beds = go.Figure()
fig_beds.add_trace(go.Scatter(x=result['State/UT'],
                y=result['total_beds'],
                name='Total beds',
                marker_color='rgb(55, 83, 109)',
                mode='markers',
                ))
fig_beds.add_trace(go.Scatter(x=result['State/UT'],
                y=result['counts'],
                name='Hospitalized',
                marker_color='rgb(26, 118, 255)',
                mode='markers',
                ))
fig_beds.update_layout(
    title_text="Statewise Confirmed Cases v/s Beds",
    yaxis=dict(
        title=''
    )
    ,xaxis=dict(
        title='States'
    ),
    hovermode = 'x')

world_time_series=pd.read_csv('johns-hopkins-covid-19-daily-dashboard-cases-over-time.csv')[['country_region','last_update','confirmed','iso3']]

world_time_series.query('country_region=="US" and last_update=="2020-01-22"')['confirmed'].sum()

cleaned=world_time_series[world_time_series["last_update"]=="2020-01-22"]['country_region'].value_counts().rename_axis('country').to_frame('counts')

world_time_series

dates=world_time_series['last_update'].unique()

dates.size

cleaned=world_time_series[world_time_series["last_update"]=="2020-01-22"]['country_region'].value_counts()

cleaned.size

#explaination
for date in dates:
    cleaned=world_time_series[world_time_series["last_update"]==date]['country_region'].value_counts().to_dict()
    for key,values in cleaned.items():
        if values>1:
            print(key,":",values,date)

countries=world_time_series['country_region'].unique()
countries

custom_df=pd.DataFrame(columns=['date','country','iso3','cases'])
ind=0
for date in dates:
    for country in countries:
        row_=world_time_series.query('country_region==@country and last_update==@date')
        d={}
        if country=='US':
            #print(date,country,'USA',":",row_['confirmed'].sum())
            d = {'date': date, 'country': country,'iso3':'USA','cases':int(max(row_['confirmed']))}
        else:
            #print(date,country,row_['iso3'].values[0],row_['confirmed'].values[0])
            d = {'date': date, 'country': country,'iso3':row_['iso3'].values[0],'cases':int(row_['confirmed'].values[0])}
        
        custom_df.at[ind, :] = d
        ind+=1

custom_df

custom_df = custom_df.astype({"cases":int})

custom_df.info()

custom_df

custom_df.query('country=="US" and date=="2020-05-20"')

# make figure
fig_dict = {
    "data": [],
    "layout": {},
    "frames": []
}

# fill in most of layout
fig_dict["layout"]["geo_scope"]='world'
fig_dict["layout"]["updatemenus"] = [
    {
        "buttons": [
            {
                "args": [None, {"frame": {"duration": 500, "redraw": False},
                                "fromcurrent": True, "transition": {"duration": 300,
                                                                    "easing": "quadratic-in-out"}}],
                "label": "Play",
                "method": "animate"
            },
            {
                "args": [[None], {"frame": {"duration": 0, "redraw": False},
                                  "mode": "immediate",
                                  "transition": {"duration": 0}}],
                "label": "Pause",
                "method": "animate"
            }
        ],
        "direction": "left",
        "pad": {"r": 10, "t": 87},
        "showactive": False,
        "type": "buttons",
        "x": 0.1,
        "xanchor": "right",
        "y": 0,
        "yanchor": "top"
    }
]

sliders_dict = {
    "active": 0,
    "yanchor": "top",
    "xanchor": "left",
    "currentvalue": {
        "font": {"size": 20},
        "prefix": "Year:",
        "visible": True,
        "xanchor": "right"
    },
    "transition": {"duration": 300, "easing": "cubic-in-out"},
    "pad": {"b": 10, "t": 50},
    "len": 0.9,
    "x": 0.1,
    "y": 0,
    "steps": []
}

my_frames=[]
# make frames
for date in dates:
    frame = {"data": [], "name": str(date)}
    dataset_by_date = custom_df[custom_df["date"] == date]
    
    my_frames.append(go.Frame(data=go.Scattergeo(
        locations = dataset_by_date['iso3'],
        mode = 'markers',
        text=dataset_by_date['cases'],
        
        marker=dict(
            opacity=0.5,
            sizemode='area',
            size=dataset_by_date['cases'],
            sizeref =  max(dataset_by_date['cases']) / (50. ** 2),
            sizemin=2
        )
        
    )))

    
    slider_step = {"args": [
        [date],
        {"frame": {"duration": 300, "redraw": False},
         "mode": "immediate",
         "transition": {"duration": 300}}
    ],
        "label": date,
        "method": "animate"}
    sliders_dict["steps"].append(slider_step)

try1=custom_df.query('date=="2020-01-22"')

try1

fig_dict["data"]=go.Scattergeo(
        locations = try1['iso3'],
        mode = 'markers',
        text=try1['cases'],
        
        marker=dict(
            opacity=0.5,
            sizemode='area',
            size=try1['cases'],
            sizeref =  max(try1['cases']) / (50. ** 2),
            sizemin=2,
        ),
        
)

fig_world = go.Figure(data=go.Scattergeo(
        locations = try1['iso3'],
        mode = 'markers',
        text=try1['cases'],
        
        marker=dict(
            opacity=0.5,
            sizemode='area',
            size=try1['cases'],
            sizeref =  max(try1['cases']) / (50. ** 2),
            sizemin=2,
        ),
        
),
frames=my_frames,
)

fig_world.update_layout(
        title = 'Most trafficked US airports<br>(Hover for airport names)',
        geo_scope='world',
        updatemenus=[dict(
            type="buttons",
            buttons=[
            {
                'args': [None, {'frame': {'duration': 500, 'redraw': False},
                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],
                'label': 'Play',
                'method': 'animate'
            },
            {
                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',
                'transition': {'duration': 0}}],
                'label': 'Pause',
                'method': 'animate'
            }
        ]
            )
        ]
    )

[dict(
                                           method="animate",
                                           args=[None,
                                                     dict(
                                                         mode="immediate",
                                                          fromcurrent=True,
                                                          transition=dict(
                                                              duration=300
                                                          ),
                                                          frame=dict(
                                                              duration=300,
                                                              redraw=False
                                                          )
                                                     )],
                                            label="Play"
                                       ),
                                       dict(
                                           method="animate",
                                           args=[[None],
                                                     dict(
                                                         mode="immediate",
                                                          fromcurrent=True,
                                                          transition=dict(
                                                              duration=0
                                                          ),
                                                          frame=dict(
                                                              duration=0,
                                                              redraw=False
                                                          )
                                                     )],
                                            label="Pause"
                                       )]

[{'args': [None,
   {'frame': {'duration': 300, 'redraw': False},
    'fromcurrent': True,
    'mode': 'immediate',
    'transition': {'duration': 300}}],
  'label': 'Play',
  'method': 'animate'},
 {'args': [[None],
   {'frame': {'duration': 0, 'redraw': False},
    'fromcurrent': True,
    'mode': 'immediate',
    'transition': {'duration': 0}}],
  'label': 'Pause',
  'method': 'animate'}]